<?xml version="1.0" encoding="UTF-8"?>

<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->

<!-- Use the following doctypedecl for DTD aware editing
<!DOCTYPE project PUBLIC "-//ANT//DTD project//EN" "project.dtd">
-->
<!-- ===================================================================

		    Ant build file for example program

This is a build file for use with the Ant build tool.  See
http://jakarta.apache.org/ant/index.html for more info.  This build.xml
file has been tested with Ant version 1.4.1.

To compile and run this sample, execute the following command:

    % ant
    
  Note:
  This script defines properties named jaxp.lib and jaxp.endorsed that
  point to the directories containing the necessary jar files. Should
  you need to, you can modify those properties by executing a command 
  like this: 
    % ant -Djaxp.lib=<some_dir>  -Djaxp.endorsed=<some_dir>
    
  For more information, see the samples.html and release notes documents
  that came as part of the download bundle.
    
======================================================================== -->
<project basedir="." default="main" name="SAMPLES">

    <!-- jaxp.lib points to the directory containing the JAXP API jar file -->
    <property name="dist" value=".."/>
    
    <!-- JAXP jars like jaxp-api.jar, sax.jar, dom.jar, xercesImpl.jar, xalan.jar -->
    <property name="jaxp.lib" value="${dist}/lib"/>

    <!-- defining a separate property for jaxp apis as it would help to easily change the location when
    JAXP is shipped with JWSDP and stand alone distribution -->
    <property name="jaxp.apis" value="${dist}"/>
    
    <!-- jaxp.endorsed points to the JAXP directory containing jar files
    related to the Endorsed API Override Mechanism. -->
    <!-- <property name="jaxp.endorsed" value="${jaxp.lib}:${jaxp.apis}"/> -->

    <property name="debug" value="on"/>

    <!-- Load User Defined Properties -->
    <property file="build.properties"/>
    <property name="samples.src.dir"   value="."/>
    <property name="samples.build.dir" value="${basedir}/build"/>
    <property name="build.javadoc.params" value="-breakiterator"/>
    <property name="stax.data.dir" value="${basedir}/stax/data"/>
    <property name="output.dir" value="${samples.build.dir}/output"/>
    <!-- Set the classpath. -->

    <path id="project-classpath">
            <pathelement location="."/>
            <pathelement location="${jaxp.lib}/jaxp-api.jar"/>
            <pathelement location="${jaxp.lib}/jaxp-ri.jar"/>
            <pathelement location="${samples.build.dir}/"/>
            <pathelement location="${java.home}/lib/rt.jar"/>
    </path>
    <property name="bootclasspath" refid="project-classpath" />

    <target name="init">
        <condition property="isWindows">
            <and>
                <os family="windows"/>
            </and>
        </condition>
        
        <condition property="isNotWindows">
            <not>
                <os family="windows" />
            </not>
        </condition>
    </target>

    <!-- Compile the example program -->
    <target depends="clean" name="compile">        
        <javac debug="${debug}" destdir="${samples.build.dir}/" includeantruntime="no" srcdir="." bootclasspathref="project-classpath">			
        </javac>
    </target>

    <!-- Run the example program with sample input files.  Note, when this
    target is executed, ant may prefix the output with "[java]".  Run
    the program with "java" directly to avoid this. -->
    <target
            depends="compile,
                    DOMEcho,
                    DOMSerializer,
                    SAXLocalNameCount,
                    SchemaValidator,
                    SecureParser,
                    XIncludeParser,
                    XPath,
                    StAXCursorParse,
                    StAXCursorApproachEventObject,
                    StAXEventParse,
                    StAXNamespaceFilter,
                    StAXStreamFilter,
                    StAXEventProducerConsumer,
                    StAXStreamReader,
                    StAXCursorWriter,
                    StAXHelloWorld"
                    name="run">
    </target>
	
    <target name="javadocs"
            depends="init">

            <javadoc
                    destdir="${samples.build.dir}/docs/api"
                    use="true"
                    author="true"
                    version="true"
                    locale="en_US"
                    windowtitle="Java&amp;trade; API for XML Processing (JAXP) Samples"
                    doctitle="Java&amp;trade; API for XML Processing (JAXP) Samples"
                    additionalparam="${build.javadoc.params}">

                    <fileset dir="${samples.src.dir}">
                            <include name="**/*.java" />
                    </fileset>
                    <classpath refid="project-classpath"/>
            </javadoc>

    </target>	

    <target name="DOMSerializer" depends="sequence" >
            <echo>java dom.DOMSerializer foo.xml dom_serializer_output.xml;</echo>
            <java classname="dom.DOMSerializer" fork="yes">
                    <jvmarg value="-Djava.endorsed.dirs=${jaxp.endorsed}"/>
                    <arg value="${basedir}/data/foo.xml"/>
                    <arg value="${samples.build.dir}/dom_serializer_output.xml"/>
                    <classpath refid="project-classpath"/>
            </java>
    </target>

    <target name="DOMLS" depends="sequence" >
            <echo>java dom.DOMLS foo.xml dom_ls_output.xml;</echo>
            <java classname="dom.DOMLS" fork="yes">
                    <jvmarg value="-Djava.endorsed.dirs=${jaxp.endorsed}"/>
                    <arg value="data/foo.xml"/>
                    <arg value="${output.dir}/dom_ls_output.xml"/>
                    <classpath refid="project-classpath"/>
            </java>
    </target>

    <target name="windows" if="isWindows">
        <echo message="windows target executed"/>
        <property name="jaxp.endorsed" value="${jaxp.lib};${jaxp.apis}"/>
    </target>
    
    <target name="notWindows" if="isNotWindows">
        <echo message="Non-windows target executed"/>
        <property name="jaxp.endorsed" value="${jaxp.lib}:${jaxp.apis}"/>
        <echo message="using endorsed directory: ${jaxp.endorsed}" />
    </target>
    
    <target name="sequence" depends="init, windows, notWindows"/>
    
    <target name="DOMEcho" depends="sequence" >

            <echo>java dom.DOMEcho ../data/namespace.xml</echo>
            <echo message="${jaxp.endorsed}"/>
            <java classname="dom.DOMEcho" fork="yes">
                    <jvmarg value="-Djava.endorsed.dirs=${jaxp.endorsed}"/>
                    <arg value="data/namespace.xml"/>			
                    <classpath refid="project-classpath"/> 
            </java>
    </target>

    <target name="SAXLocalNameCount" depends="sequence" >
            <echo>java sax.SAXLocalNameCount -dtd data/book-order.xml</echo>
            <java classname="sax.SAXLocalNameCount" fork="yes">
                    <jvmarg value="-Djava.endorsed.dirs=${jaxp.endorsed}"/>
                    <arg value="-dtd"/>
                    <arg value="data/book-order.xml"/>
                    <classpath refid="project-classpath"/>
            </java>
    </target>

    <target
            name="XPath"
            depends="compile,sequence">

            <property name="file" value="data/HelloWorldService.wsdl"/>
            <property name="expression" value="//soap:body"/>
            <echo>java ${file} ${expression}</echo>
            <java classname="XPathDemo" fork="yes">
                    <classpath refid="project-classpath" />
                    <jvmarg value="-Djava.endorsed.dirs=${jaxp.endorsed}" />
                    <arg value="${file}" />
                    <arg value="${expression}" />
            </java>
    </target>

    <target name="SecureParser" depends="sequence" >
            <echo>java SecureProcessing.SecureParser -enableSecureProcessing=true data/personal-schema.xml;</echo>
            <java classname="SecureProcessing.SecureParser" fork="yes">
                    <jvmarg value="-Djava.endorsed.dirs=${jaxp.endorsed}"/>
                    <arg value="-enableSecureProcessing=true"/>
                    <arg value="data/personal-schema.xml"/>
                    <classpath refid="project-classpath"/>
            </java>
    </target>

    <target name="XIncludeParser" depends="sequence" >
            <echo>java XInclude.XIncludeParser data/document_xinclude.xml build/xinclude_output.xml;</echo>
            <java classname="XInclude.XIncludeParser" fork="yes">
                    <jvmarg value="-Djava.endorsed.dirs=${jaxp.endorsed}"/>
                    <arg value="data/document_xinclude.xml"/>
                    <arg value="build/xinclude_output.xml;"/>
                    <classpath refid="project-classpath"/>
            </java>
            <echo>java XInclude.XIncludeParser data/document_xpointer.xml build/xinclude_pointer.xml;</echo>
            <java classname="XInclude.XIncludeParser" fork="yes">
                    <jvmarg value="-Djava.endorsed.dirs=${jaxp.endorsed}"/>
                    <arg value="data/document_xpointer.xml"/>
                    <arg value="build/xinclude_pointer.xml"/>
                    <classpath refid="project-classpath"/>
            </java>
    </target>

    <target name="SchemaValidator" depends="sequence" >
            <echo>java validation.SchemaValidator data/personal.xsd data/persoanal-schema.xml ;</echo>
            <java classname="validation.SchemaValidator" fork="yes">
                    <jvmarg value="-Djava.endorsed.dirs=${jaxp.endorsed}"/>
                    <arg value="data/personal.xsd"/>
                    <arg value="data/personal-schema.xml"/>
                    <classpath refid="project-classpath"/>
            </java>
    </target>

    <target name="StAXCursorParse" depends="sequence">
        <echo message=" Running CursorParse Sample."/>
        <java            
            classname="stax.cursor.CursorParse"
            fork="true"
            failOnError="true">
            <jvmarg value="-Djava.endorsed.dirs=${jaxp.endorsed}" />
            <arg value="${stax.data.dir}/BookCatalogue.xml"/>
            <classpath refid="project-classpath"/> 
        </java>
    </target>

    <target name="StAXCursorApproachEventObject" depends="sequence">        
        <echo message=" Running cursor2event.CursorApproachEventObject Sample."/>
        <java failOnError="true" classname="stax.cursor2event.CursorApproachEventObject" fork="true">
            <jvmarg value="-Djava.endorsed.dirs=${jaxp.endorsed}" />
            <arg value="${stax.data.dir}/BookCatalogue.xml"/>
            <classpath refid="project-classpath"/>
        </java>
    </target>

    <target name="StAXEventParse" depends="sequence">
        <echo message="Current directory is ${basedir}"/>
        <echo message=" Running EventParse Sample."/>
        <java failOnError="true" classname="stax.event.EventParse" fork="true">
            <jvmarg value="-Djava.endorsed.dirs=${jaxp.endorsed}"/>
            <arg value="${stax.data.dir}/BookCatalogue.xml"/>
            <classpath refid="project-classpath"/>
        </java>
    </target>

    <target name="StAXNamespaceFilter" depends="sequence">
        <echo message=" Running MyNamespaceFilter."/>
        <java
            classname="stax.filter.MyNamespaceFilter"
            fork="true"
            failOnError="true">
            <jvmarg value="-Djava.endorsed.dirs=${jaxp.endorsed}"/>
            <arg value="http://accept"/>
            <arg value="${stax.data.dir}/filter.MyNamespaceFilter.xml"/>    
            <classpath refid="project-classpath"/>
        </java>
    </target>

    <target name="StAXStreamFilter" depends="sequence">
        <echo message=" Running MyStreamFilter Sample."/>
        <java failOnError="true" classname="stax.filter.MyStreamFilter" fork="true">
            <jvmarg value="-Djava.endorsed.dirs=${jaxp.endorsed}"/>
            <arg value="-f"/>            
            <arg value="${stax.data.dir}/BookCatalogue.xml"/>            
            <classpath refid="project-classpath"/>
        </java>
    </target>

    <target name="StAXEventProducerConsumer" depends="sequence">        
        <echo message=" Running readnwrite.EventProducerConsumer Sample."/>
        <java failOnError="true" classname="stax.readnwrite.EventProducerConsumer" fork="true">
            <jvmarg value="-Djava.endorsed.dirs=${jaxp.endorsed}"/>
            <arg value="${stax.data.dir}/BookCatalogue.xml"/>
            <classpath refid="project-classpath"/>
        </java>
    </target>
    
    <target name="StAXStreamReader" depends="sequence">
        <echo message=" stream.MyStreamReader."/>
        <java classname="stax.stream.MyStreamReader" fork="true" failOnError="true">
            <jvmarg value="-Djava.endorsed.dirs=${jaxp.endorsed}"/>
            <arg value="${stax.data.dir}/stream.MyStreamReader.xml"/>            
            <classpath refid="project-classpath"/>
        </java>
    </target>

    <target name="StAXCursorWriter" depends="sequence">
        <echo message=" Running CursorWriter Sample. Output will be written to ${output.dir}/writer.CursorWriter.xml."/>
        <java failOnError="true" classname="stax.writer.CursorWriter" fork="true">
            <jvmarg value="-Djava.endorsed.dirs=${jaxp.endorsed}"/>
            <arg value="-f"/>
            <!-- Output file name -->
            <arg value="${output.dir}/writer.CursorWriter.xml"/>
            <classpath refid="project-classpath"/>
        </java>
    </target>
    
    <target name="StAXHelloWorld" depends="sequence">
        
        <echo message=" Running writer HelloWorld Sample. Output will be written to ${output.dir}/writer.HelloWorld.xml." />
        <java failOnError="true" classname="stax.writer.HelloWorld" fork="true">
            <jvmarg value="-Djava.endorsed.dirs=${jaxp.endorsed}"/>
            <arg value="-f"/>
            <!-- Output file name -->
            <arg value="${output.dir}/writer.HelloWorld.xml" />
            <classpath refid="project-classpath"/>
        </java>
    </target>
        
    <target name="clean">
            <delete dir="${samples.build.dir}"/>
            <mkdir dir="${samples.build.dir}"/>
            <mkdir dir="${output.dir}"/>
    </target>

    <target name="main" depends="compile, javadocs, run"/>
    <target name="help" depends="usage" />
    <target name="usage">
            <echo>Usage : </echo>
            <echo message=""/>
            <echo>How to compile and run JAXP Samples </echo>
            <echo>----------------------------------------------</echo>
            <echo message=""/>
            <echo message=""/>
            <echo>compile -----------&gt; Clean existing build directory and compile JAXP samples  </echo>
            <echo>run ---------------&gt; Compile and execute sample programs.</echo>
            <echo message=""/>
            <echo>Available sample targets :</echo>
            <echo>----------------------------------------------</echo>
            <echo message=""/>
            <echo message=""/>
            <echo>DOMEcho</echo>
            <echo>DOMLS</echo>
            <echo>DOMSerialzer</echo>
            <echo>SAXLocalNameCount</echo>
            <echo>SchemaValidator</echo>
            <echo>SecureParser</echo>
            <echo>StAXCursorParse</echo>
            <echo>StAXCursorApproachEventObject</echo>
            <echo>StAXEventParse</echo>
            <echo>StAXNamespaceFilter</echo>
            <echo>StAXStreamFilter</echo>
            <echo>StAXEventProducerConsumer</echo>
            <echo>StAXStreamReader</echo>
            <echo>StAXCursorWriter</echo>
            <echo>StAXHelloWorld</echo>      
            <echo>XPath</echo>
            <echo>clean</echo>
    </target>

</project>
